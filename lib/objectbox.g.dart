// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/brief_ai_tools/chat_branch/chat_branch_message.dart';
import 'models/brief_ai_tools/chat_branch/chat_branch_session.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7398916962947393120),
      name: 'ChatBranchMessage',
      lastPropertyId: const obx_int.IdUid(18, 7585586096969215181),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 663759051357005127),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2533694005057715230),
            name: 'messageId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6650378464308053979),
            name: 'role',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 190236776376223537),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2793736958453191432),
            name: 'createTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 612952391890001157),
            name: 'reasoningContent',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6707361953310579313),
            name: 'thinkingDuration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3143775420052005325),
            name: 'contentVoicePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1212526566592745639),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3403799697500762700),
            name: 'promptTokens',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7845095937442009569),
            name: 'completionTokens',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 421102652505127844),
            name: 'totalTokens',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8283486010537753908),
            name: 'modelLabel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6616749242739648398),
            name: 'parentId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 3848879351303009376),
            relationTarget: 'ChatBranchMessage'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 7783822287074515140),
            name: 'sessionId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 1199805754380849427),
            relationTarget: 'ChatBranchSession'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 4092703744143120199),
            name: 'branchIndex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 2415142824562793406),
            name: 'depth',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 7585586096969215181),
            name: 'branchPath',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'children',
            srcEntity: 'ChatBranchMessage',
            srcField: 'parent')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5269213793287580175),
      name: 'ChatBranchSession',
      lastPropertyId: const obx_int.IdUid(6, 5674310908780275708),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9088884807686381150),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 520426824153187873),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4732563075623604951),
            name: 'createTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2081696311100180812),
            name: 'updateTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3948570149307031533),
            name: 'llmSpecJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5674310908780275708),
            name: 'modelTypeStr',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'messages',
            srcEntity: 'ChatBranchMessage',
            srcField: 'session')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 5269213793287580175),
      lastIndexId: const obx_int.IdUid(2, 1199805754380849427),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ChatBranchMessage: obx_int.EntityDefinition<ChatBranchMessage>(
        model: _entities[0],
        toOneRelations: (ChatBranchMessage object) =>
            [object.parent, object.session],
        toManyRelations: (ChatBranchMessage object) => {
              obx_int.RelInfo<ChatBranchMessage>.toOneBacklink(14, object.id,
                      (ChatBranchMessage srcObject) => srcObject.parent):
                  object.children
            },
        getId: (ChatBranchMessage object) => object.id,
        setId: (ChatBranchMessage object, int id) {
          object.id = id;
        },
        objectToFB: (ChatBranchMessage object, fb.Builder fbb) {
          final messageIdOffset = fbb.writeString(object.messageId);
          final roleOffset = fbb.writeString(object.role);
          final contentOffset = fbb.writeString(object.content);
          final reasoningContentOffset = object.reasoningContent == null
              ? null
              : fbb.writeString(object.reasoningContent!);
          final contentVoicePathOffset = object.contentVoicePath == null
              ? null
              : fbb.writeString(object.contentVoicePath!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final modelLabelOffset = object.modelLabel == null
              ? null
              : fbb.writeString(object.modelLabel!);
          final branchPathOffset = fbb.writeString(object.branchPath);
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, messageIdOffset);
          fbb.addOffset(2, roleOffset);
          fbb.addOffset(3, contentOffset);
          fbb.addInt64(4, object.createTime.millisecondsSinceEpoch);
          fbb.addOffset(5, reasoningContentOffset);
          fbb.addInt64(6, object.thinkingDuration);
          fbb.addOffset(7, contentVoicePathOffset);
          fbb.addOffset(8, imageUrlOffset);
          fbb.addInt64(9, object.promptTokens);
          fbb.addInt64(10, object.completionTokens);
          fbb.addInt64(11, object.totalTokens);
          fbb.addOffset(12, modelLabelOffset);
          fbb.addInt64(13, object.parent.targetId);
          fbb.addInt64(14, object.session.targetId);
          fbb.addInt64(15, object.branchIndex);
          fbb.addInt64(16, object.depth);
          fbb.addOffset(17, branchPathOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final messageIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final roleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final createTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final branchIndexParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          final depthParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          final branchPathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 38, '');
          final reasoningContentParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final thinkingDurationParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final contentVoicePathParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final promptTokensParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final completionTokensParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final totalTokensParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final modelLabelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final object = ChatBranchMessage(
              id: idParam,
              messageId: messageIdParam,
              role: roleParam,
              content: contentParam,
              createTime: createTimeParam,
              branchIndex: branchIndexParam,
              depth: depthParam,
              branchPath: branchPathParam,
              reasoningContent: reasoningContentParam,
              thinkingDuration: thinkingDurationParam,
              contentVoicePath: contentVoicePathParam,
              imageUrl: imageUrlParam,
              promptTokens: promptTokensParam,
              completionTokens: completionTokensParam,
              totalTokens: totalTokensParam,
              modelLabel: modelLabelParam);
          object.parent.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.parent.attach(store);
          object.session.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.session.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<ChatBranchMessage>(
              object.children,
              store,
              obx_int.RelInfo<ChatBranchMessage>.toOneBacklink(14, object.id,
                  (ChatBranchMessage srcObject) => srcObject.parent));
          return object;
        }),
    ChatBranchSession: obx_int.EntityDefinition<ChatBranchSession>(
        model: _entities[1],
        toOneRelations: (ChatBranchSession object) => [],
        toManyRelations: (ChatBranchSession object) => {
              obx_int.RelInfo<ChatBranchMessage>.toOneBacklink(15, object.id,
                      (ChatBranchMessage srcObject) => srcObject.session):
                  object.messages
            },
        getId: (ChatBranchSession object) => object.id,
        setId: (ChatBranchSession object, int id) {
          object.id = id;
        },
        objectToFB: (ChatBranchSession object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final llmSpecJsonOffset = object.llmSpecJson == null
              ? null
              : fbb.writeString(object.llmSpecJson!);
          final modelTypeStrOffset = object.modelTypeStr == null
              ? null
              : fbb.writeString(object.modelTypeStr!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addInt64(2, object.createTime.millisecondsSinceEpoch);
          fbb.addInt64(3, object.updateTime.millisecondsSinceEpoch);
          fbb.addOffset(4, llmSpecJsonOffset);
          fbb.addOffset(5, modelTypeStrOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final updateTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final llmSpecJsonParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final modelTypeStrParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final object = ChatBranchSession(
              id: idParam,
              title: titleParam,
              createTime: createTimeParam,
              updateTime: updateTimeParam,
              llmSpecJson: llmSpecJsonParam,
              modelTypeStr: modelTypeStrParam);
          obx_int.InternalToManyAccess.setRelInfo<ChatBranchSession>(
              object.messages,
              store,
              obx_int.RelInfo<ChatBranchMessage>.toOneBacklink(15, object.id,
                  (ChatBranchMessage srcObject) => srcObject.session));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ChatBranchMessage] entity fields to define ObjectBox queries.
class ChatBranchMessage_ {
  /// See [ChatBranchMessage.id].
  static final id =
      obx.QueryIntegerProperty<ChatBranchMessage>(_entities[0].properties[0]);

  /// See [ChatBranchMessage.messageId].
  static final messageId =
      obx.QueryStringProperty<ChatBranchMessage>(_entities[0].properties[1]);

  /// See [ChatBranchMessage.role].
  static final role =
      obx.QueryStringProperty<ChatBranchMessage>(_entities[0].properties[2]);

  /// See [ChatBranchMessage.content].
  static final content =
      obx.QueryStringProperty<ChatBranchMessage>(_entities[0].properties[3]);

  /// See [ChatBranchMessage.createTime].
  static final createTime =
      obx.QueryDateProperty<ChatBranchMessage>(_entities[0].properties[4]);

  /// See [ChatBranchMessage.reasoningContent].
  static final reasoningContent =
      obx.QueryStringProperty<ChatBranchMessage>(_entities[0].properties[5]);

  /// See [ChatBranchMessage.thinkingDuration].
  static final thinkingDuration =
      obx.QueryIntegerProperty<ChatBranchMessage>(_entities[0].properties[6]);

  /// See [ChatBranchMessage.contentVoicePath].
  static final contentVoicePath =
      obx.QueryStringProperty<ChatBranchMessage>(_entities[0].properties[7]);

  /// See [ChatBranchMessage.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<ChatBranchMessage>(_entities[0].properties[8]);

  /// See [ChatBranchMessage.promptTokens].
  static final promptTokens =
      obx.QueryIntegerProperty<ChatBranchMessage>(_entities[0].properties[9]);

  /// See [ChatBranchMessage.completionTokens].
  static final completionTokens =
      obx.QueryIntegerProperty<ChatBranchMessage>(_entities[0].properties[10]);

  /// See [ChatBranchMessage.totalTokens].
  static final totalTokens =
      obx.QueryIntegerProperty<ChatBranchMessage>(_entities[0].properties[11]);

  /// See [ChatBranchMessage.modelLabel].
  static final modelLabel =
      obx.QueryStringProperty<ChatBranchMessage>(_entities[0].properties[12]);

  /// See [ChatBranchMessage.parent].
  static final parent =
      obx.QueryRelationToOne<ChatBranchMessage, ChatBranchMessage>(
          _entities[0].properties[13]);

  /// See [ChatBranchMessage.session].
  static final session =
      obx.QueryRelationToOne<ChatBranchMessage, ChatBranchSession>(
          _entities[0].properties[14]);

  /// See [ChatBranchMessage.branchIndex].
  static final branchIndex =
      obx.QueryIntegerProperty<ChatBranchMessage>(_entities[0].properties[15]);

  /// See [ChatBranchMessage.depth].
  static final depth =
      obx.QueryIntegerProperty<ChatBranchMessage>(_entities[0].properties[16]);

  /// See [ChatBranchMessage.branchPath].
  static final branchPath =
      obx.QueryStringProperty<ChatBranchMessage>(_entities[0].properties[17]);

  /// see [ChatBranchMessage.children]
  static final children =
      obx.QueryBacklinkToMany<ChatBranchMessage, ChatBranchMessage>(
          ChatBranchMessage_.parent);
}

/// [ChatBranchSession] entity fields to define ObjectBox queries.
class ChatBranchSession_ {
  /// See [ChatBranchSession.id].
  static final id =
      obx.QueryIntegerProperty<ChatBranchSession>(_entities[1].properties[0]);

  /// See [ChatBranchSession.title].
  static final title =
      obx.QueryStringProperty<ChatBranchSession>(_entities[1].properties[1]);

  /// See [ChatBranchSession.createTime].
  static final createTime =
      obx.QueryDateProperty<ChatBranchSession>(_entities[1].properties[2]);

  /// See [ChatBranchSession.updateTime].
  static final updateTime =
      obx.QueryDateProperty<ChatBranchSession>(_entities[1].properties[3]);

  /// See [ChatBranchSession.llmSpecJson].
  static final llmSpecJson =
      obx.QueryStringProperty<ChatBranchSession>(_entities[1].properties[4]);

  /// See [ChatBranchSession.modelTypeStr].
  static final modelTypeStr =
      obx.QueryStringProperty<ChatBranchSession>(_entities[1].properties[5]);

  /// see [ChatBranchSession.messages]
  static final messages =
      obx.QueryBacklinkToMany<ChatBranchMessage, ChatBranchSession>(
          ChatBranchMessage_.session);
}
